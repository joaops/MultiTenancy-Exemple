<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    
    <context:component-scan base-package="com"/>
    
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="org.postgresql.Driver"></property>
        <property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/test"></property>
        <property name="user" value="postgres"></property>
        <property name="password" value="postgres"></property>
    </bean>
    
    <bean id="staffDao" class="com.saas.dao.impl.StaffDAOImpl" >
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 2. 配置hibernate 的SessionFactory实例 这个bean由spring提供 LocalSessionFactoryBean -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        
        <property name="dataSource" ref="dataSource"></property>
        
        <property name="packagesToScan">
            <list>
                <value>com/saas/po/</value>
            </list>
        </property>
        
        <!--
        <property name="mappingLocations">
            <list>
                <value>classpath:com/saas/po/hbm/*.hbm.xml</value>
            </list>
        </property>
        -->
        
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop> 
                <prop key="hibernate.multiTenancy">SCHEMA</prop> 
                <prop key="hibernate.tenant_identifier_resolver">com.saas.mt.TenantIdResolver</prop> 
                <prop key="hibernate.multi_tenant_connection_provider">com.saas.mt.SchemaBasedMultiTenantConnectionProvider</prop>      
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop> 
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>  
                <!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> -->  
                
                <!-- c3p0 -->  
                <!-- 连接池hibernate配置 <prop key="hibernate.connection.provider_class">org.hibernate.connection.ProxoolConnectionProvider</prop> -->  
                
                <!-- 需要再次配置数据源,c3p0才起作用 -->  
                <prop key="hibernate.connection.provider_class">org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider</prop>   
                <prop key="hibernate.connection.driver_class">org.postgresql.Driver</prop>  
                <prop key="hibernate.connection.url">jdbc:postgresql://localhost:5432/test</prop>  
                <prop key="hibernate.connection.username">postgres</prop>  
                <prop key="hibernate.connection.password">postgres</prop>  
                
                <!-- 连接池中JDBC连接的最小数量。Hibernate默认为1 -->  
                <prop key="hibernate.c3p0.min_size">3</prop>  
                <!-- 连接池中JDBC连接的最大数量。Hibernate默认为100 -->  
                <prop key="hibernate.c3p0.max_size">56</prop>  
                <!-- 何时从连接池中移除一个空闲的连接（以秒为单位）时。Hibernate默认为0，永不过期 -->  
                <prop key="hibernate.c3p0.timeout">321</prop>  
                <!-- 被缓存的预编译语句数量。用来提高性能。Hibernate默认为0，缓存不可用 -->  
                <prop key="c3p0.max_statements">255</prop>  
                <!-- 一个连接被自动验证前的闲置时间（以秒为单位）。Hibernate默认为0 -->  
                <prop key="hibernate.c3p0.idle_test_period">300</prop>  
                <!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->  
                <prop key="hibernate.c3p0.acquire_increment">2</prop>  
                <!-- 每次都验证连接是否可用 -->  
                <prop key="hibernate.c3p0.validate">true</prop>  
            </props>
        </property>
        
    </bean>
    
    <!-- Quando configure Primavera transação declarativa -->
    
    <!-- 3. Configurar a transação gerente tem primavera fornecida HibernateTransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
    <!-- 4. Notificação atributos operação de configuração , você precisa do gerenciador de transações transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- Propriedades de propagação de transações -->
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="ad*" propagation="REQUIRED" />
            <tx:method name="updat*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    
    <!-- 5. Configurando operação de corte AOP ponto , eo ponto de corte associado e os atributos de transação	 -->
    <aop:config>
        <!-- Ponto de configuração de tangência -->
        <aop:pointcut expression="execution(* com.saas.service.impl.*.*(..))" id="pointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
    
</beans>